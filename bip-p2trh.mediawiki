<pre>
  BIP: TBD
  Layer: Consensus (soft fork)
  Title: Pay to Taproot Hash (P2TRH)
  Author: Hunter Beast <hunter@surmount.systems>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD
  Status: Draft
  Type: Standards Track
  Created: 2025-01-19
  License: CC0-1.0
</pre>

== Abstract ==

This BIP proposes a new Segregated Witness output type called '''Pay to Taproot Hash''' (P2TRH). It is structurally
similar to Pay to Taproot ([[bip-0341.mediawiki|BIP-341]]) but replaces the "X-only" public key commitment in the output script with a
<code>HASH256</code> commitment of that public key. The actual public key is only revealed in the witness at spending
time, reducing its long-term on-chain exposure to potential quantum-based attacks.

This approach is '''not''' a fully quantum-safe solution using Post-Quantum Cryptography (PQC). For that, see
[[bip-0360.mediawiki|BIP-360]]. Rather, it is a conservative ''intermediary'' measure: it defers key disclosure until
spend time, potentially reducing attack vectors reliant on indefinite on-chain exposure of elliptic curve public keys.

== Motivation ==

1. '''Long-Term Exposure''': Current Taproot outputs reveal an X-only public key directly in the ScriptPubKey, which
could, in theory, become more vulnerable to quantum attacks over a long horizon.

2. '''Intermediate Hardening''': Next-generation PQC schemes are still maturing. '''P2TRH''' improves security by
storing only the hash of an ECC public key on-chain, delaying public key disclosure until spending.

3. '''Avoids Premature Complexity''': By reusing Schnorr signature logic ([[bip-0340.mediawiki|BIP-340]]) rather than
introducing novel PQC systems, P2TRH remains simpler and less controversial than a full quantum-safe signature soft fork.

== Rationale ==

Current Schnorr-based outputs (BIP-340) publish an X-only key in the scriptPubKey. It being X-only provides no additional
quantum security benefits. P2TRH replaces that with a hash, limiting indefinite on-chain exposure of ECC keys to quantum
threats, also known as long exposure attacks.

P2TRH stores a 32-byte <code>HASH256</code> instead of a public key. It reuses BIP-340 signature logic, so it defers
public key disclosure until the spend. While not fully quantum-safe, it reduces exposure compared to Taproot.

Full PQC proposals (e.g., BIP-360) require introducing new signature schemes, transaction structures, and cryptographic
commitment mechanisms, which can be contentious before PQC standards mature. By relying on reviewed BIP-340 logic,
P2TRH lowers consensus risk while providing extra quantum-resistance compared to plain Taproot outputs.

Once a P2TRH spend is broadcast, the public key and signature are visible. Private mempool approaches can limit
who sees them before confirmation. A quantum attacker would otherwise have to break the key within a short window.
Private mempools provide a partial mitigation until PQC solutions are standard.

Transactions can be cryptographically timestamped and inclusion proofs can be provided to prove when or to whom they
were revealed. In case of suspected quantum compromise, such evidence can help defend against malicious leaking public
keys, though it does not fully resolve the underlying quantum threat.

Prior to Taproot, typical P2PKH/P2WPKH hashed the public key on-chain. Taproot exposed the X-only key directly.
P2TRH restores the classical "key hidden until spend" property while retaining Schnorr benefits, offering a modest
but immediate quantum hardening compared to plain Taproot, at the expense of a slightly larger witness size.

While P2WSH is safe against quantum attackers employing Shor's algorithm, it does not provide the benefits
of signature aggregation that come with Schnorr signatures and other Taproot-related fee-saving mechanisms.

Shor's algorithm remains the primary concern because it solves the discrete log problem in polynomial time—effectively
nullifying ECC security if the public key is exposed indefinitely. In contrast, Grover's algorithm offers only a
square-root speedup for brute-force (from <math>2^n</math> to <math>2^{n/2}</math>), which is far less threatening than
a true polynomial-time break. See BIP-360 for further context.

The P2TRH hash-based concealment scheme is simpler to adopt while PQC standards evolve. Ultimately, a new signature
algorithm will be needed for robust quantum security. In the interim, P2TRH provides a simpler, less contentious path
to improve the quantum resistance of Bitcoin.

=== Summary ===

P2TRH replaces Taproot's on-chain X-only key with a 32-byte hash, mitigating indefinite exposure for dormant funds.
It is not a full PQC solution; short-term exposure in the mempool remains. Techniques like private mempools,
timestamping, and social consensus can bolster security until PQC methods become practical.

== Specification ==

=== Segregated Witness Version Number ===

* '''SegWit version''': <code>v2</code>
* '''Addresses''': Bech32m encoding with version byte <code>2</code> (e.g., <code>bc1z...</code> for mainnet)

=== ScriptPubKey ===

A P2TRH output script has the form:

<code>OP_2 <pubKeyHash></code>

Where:
* <code>OP_2</code> indicates a SegWit v2 context.
* <code><pubKeyHash></code> is the 32-byte double SHA256 hash of the X-only public key:

<math>H = SHA256(SHA256(pubkey_{x-only}))</math>

=== Witness Program ===

Let <code>pubKeyHash = HASH256(pubkeyXonly)</code> be the 32-byte value in the ScriptPubKey. Upon spending, the witness
must provide:

* The full X-only public key (<code>pubkeyXonly</code>).
* A valid Schnorr signature (per BIP-340) over the transaction, as described in
[[#Transaction_validation|Transaction validation]].
* (Optionally) If scripts or additional logic are integrated (akin to Tapscript), they follow the same approach as
BIP-341/([[bip-0342.mediawiki|BIP-342]]). For a pure key-path design, only the pubkey preimage and signature are required.

=== Transaction Validation ===

When a transaction spends a P2TRH output:

# '''Hash Check'''
#* Extract <code>pubkeyXonly</code> from the witness.
#* Compute <code>temp = HASH256(pubkeyXonly)</code>.
#* Compare <code>temp</code> to the <code>pubKeyHash</code> in the output script. If mismatch, '''fail'''.

# '''Signature Check'''
#* Construct the BIP-340 sighash message (same as Taproot key-path).
#* Verify the Schnorr signature using <code>pubkeyXonly</code>. If invalid, '''fail'''.

Spending is valid only if both checks pass.

=== Scripts and Spending Conditions ===

'''Optional / Future Extension:''' If a Merkelized Alternative Script Tree (MAST) is used (like Taproot), it can be
committed to the X-only public key before hashing. The difference is that the script path is ultimately committed to
<code>HASH256(tweakedPubKey)</code> in the ScriptPubKey, not the public key itself.

== Implementation Notes ==

=== Address Encoding ===

Addresses use Bech32m ([[bip-0350.mediawiki|BIP-350]]) with:
* '''HRP''': <code>bc</code> (mainnet) or <code>tb</code> (testnet)
* '''Witness Version''': <code>2</code> (encoded in Bech32m)
* '''Witness Program''': 32-byte <code>pubKeyHash</code> in base32

An example mainnet address could look like <code>bc1z...</code>, depending on how Bech32m encodes
<code>version=2</code> plus data.

=== Example Payment and Spending ===

==== Funding a P2TRH Output ====

1. '''Obtain a private key''':
* Via BIP-39 + BIP-32 mnemonic/seed derivation, or BIP-86 (Taproot derivation), or BIP-341 (Taproot with MAST).
* If using MAST, compute the Merkle root and apply the Taproot tweak formula. For P2TRH, perform this tweak before
the final hash commitment.

2. '''Derive the X-only public key (BIP-340)''' from the final (tweaked) secp256k1 key by discarding the Y-coordinate
sign bit.

3. '''Compute the 32-byte hash''':
<code>pubKeyHash = HASH256(pubkeyXonly)</code>

4. '''Create the P2TRH output (scriptPubKey)''':
<code>OP_2 &lt;pubKeyHash&gt;</code>

5. '''Encode the address''' using Bech32m:
<code>bc1z&lt;...&gt;</code>

6. '''Broadcast a transaction''' sending funds to this P2TRH address/output.

''Note'': For MAST/Tapscript, the final tweaked key (internal key + script tree) is hashed into
<code>pubKeyHash</code>. Spending via script-path requires revealing the internal key, script, and
Merkle path, just like Taproot.

==== Spending a P2TRH Output ====

1. '''Reveal the real pubkey''': The wallet fetches <code>privkey</code> → <code>pubkeyXonly</code>. With MAST, also
reveal the internal key, script, and Merkle proof (per BIP-341/342).

2. '''Construct the transaction''': Reference the P2TRH UTXO, create outputs, etc.

3. '''Compute the BIP-340 sighash''': Same as Taproot key-path.

4. '''Sign''': Use the secp256k1 private key to produce a Schnorr signature.

5. '''Construct the witness''':
* <code>witness[0] = signature</code>
* <code>witness[1] = pubkeyXonly</code>
* Include script/Merkle proofs if using script-path.

6. '''Validation''':
* The node hashes <code>pubkeyXonly</code> to check against <code>pubKeyHash</code>.
* If they match, the Schnorr signature is validated per BIP-340 (key-path) or BIP-342 (script-path).
* If valid, the spend succeeds.

== Cost Comparison ==

Approximate sizes and fees for a standard transaction (1 input, 2 outputs):

* '''P2WPKH''' (single-sig): 140.5 vbytes
* '''P2WSH''' (2-of-2 multisig example): 201 vbytes
* '''P2TR''' (Taproot key-path): 154 vbytes
* '''P2TRH''' (key-path): 162.25 vbytes (scriptPubKey is similar to P2TR, but the witness also includes the 32-byte pubkey, adding ~8.5 vbytes with witness discount)

See the [https://bitcoinops.org/en/tools/calc-size/ Bitcoin Optech calculator] for details.

== References ==

* [[bip-0340.mediawiki|BIP-340: Schnorr Signatures for secp256k1]]
* [[bip-0341.mediawiki|BIP-341: Taproot]]
* [[bip-0342.mediawiki|BIP-342: Tapscript]]
* [[bip-0350.mediawiki|BIP-350: Bech32m]]
* [[bip-0360.mediawiki|BIP-360 (Draft): Pay to Quantum Resistant Hash (P2QRH)]]
