<pre>
  BIP: TBD
  Title: QuBit - P2QRH spending rules
  Author: Hunter Beast <hunter@surmount.systems>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD
  Status: Draft
  Type: Standards Track
  License: BSD-3-Clause
  Created: 2024-06-08
</pre>

== Introduction ==

=== Abstract ===

This document proposes a new SegWit output type, with spending rules based on SQIsign signatures. (For more on why SQIsign is chosen, see the Security section.) A constraint is that no hard fork or modifications leading to an increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR address type using Schnorr signatures.


=== Copyright ===

This document is licensed under the 3-clause BSD license.


=== Motivation ===

This proposal aims to improve the quantum resistance of Bitcoin's signature security should the Discrete Logarithm Problem which secures Elliptic Curve Cryptography (EC DLP) no longer prove to be computationally hard, likely through quantum advantage by cryptographically-relevant quantum computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster, which here will be referred to as quantum key decryption. This means that doubling the key length, such as using a hypothetical secp512k1 curve, would only make finding the key twice as hard. Shor's algorithm in particular will likely require only 2^21 steps to recover the private key. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].

The vulnerability of existing bitcoin addresses is investigated in [https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.

Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.

A more robust solution involves the use of a Pay to Quantum Resistant Hash (P2QRH) address, which is the basis for this BIP. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band transactions.

The following table is non-exhaustive, but meant to be informative to the average Bitcoin user.

{|
|+ Vulnerable address types
|-
! Address type !! Vulnerable !! Prefix !! Example
|-
| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee
|-
| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
|-
| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku
|-
| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u
|}

It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.

Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call this the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address]. The reasoning behind this is that this can only be done by Satoshi, and given his absence, this can only be spent by others if there is a significant vulnerability in secp256k1. Should the Canary coins move, that will signal that Bitcoin is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.

As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered "Satoshi's Shield." Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.

Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for Bitcoin.


=== Rationale ===

This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B represents its connection to Bitcoin. The name QuBit also rhymes to some extent with SegWit.

It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are [r]esistant addresses, similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root. This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].

The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).

The proposed P2QRH address format is not intended to be compatible with TapScript. Instead, it is proposed to have a separate address format called P2QR to be defined in a follow-on BIP. This is meant to provide similar functionality to current P2TR addresses, but will likely require considerably more effort. P2QRH should be available to users who do not wish to have their public key exposed on-chain upon receiving payment.

P2QRH uses a 32-byte HASH256 (specifically SHA-256 x2, which is similar to that used in [https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the SQIsign public key to reduce the size of new outputs and also to increase security by not having the public key available on-chain. This serves as a minimal cryptographic commitment to a public key. This goes into the output spend script, which does not receive the witness discount. Signatures, however, do receive a 4x witness discount. SQIsign public keys are between 64 and 128 bytes in length, depending on the security level. To promote user adoption, the most secure variant of SQIsign (NIST V, 256 bit) is proposed, despite the moderate increase in key length.

In the distant future, following the implementation of P2QR and P2QRH address formats in a soft fork, there will likely be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing while still being verifiable by classical means. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.


== Description ==

We first build up a definition of the signature scheme by going through the design choices. Afterwards, we specify the exact encodings and operations.


=== Design ===

For P2QRH descriptors, <code>qrh()</code> should be used.

> Further specific details to be completed later in the draft process as outlined in [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki BIP-2]


== Security ==

{|
|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size
|-
! Signature algorithm !! Signature size, NIST I !! Signature size, NIST V !! Year first introduced
|-
| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || n/a || 8192 bytes || 1977
|-
| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1] || 7856 bytes || 29792 bytes || 2015
|-
| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 702 bytes || 1814 bytes || 2016
|-
| [https://falcon-sign.info FALCON] || 666 bytes || 1280 bytes || 2017
|-
| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 652 bytes || 1261 bytes || 2022
|-
| [https://sqisign.org SQIsign] || 177 bytes || 335 bytes || 2023
|-
| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 148 bytes || 294 bytes || 2024
|-
| [https://link.springer.com/content/pdf/10.1007/978-3-031-58716-0_1.pdf SQIsignHD] || 109 bytes || not provided || 2024
|}

As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major constraints.

In comparison, the size of currently used signature algorithms are:

* ECDSA - 70-72 bytes
* Schnorr - 64 bytes

In comparison to year, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].

One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.

In the meantime, it's recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, "bc1q") address at a time.

Ideally SQIsignHD also proves to be flexible enough to support [https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript.

Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size due to block space being the primary constraint in this proposal. As a P2QRH implementation materializes, a benchmark will be added for comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to cached in [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32 HD wallets].

An additional consideration are security levels. Longer signature sizes provide more security. NIST has standardized five security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and security level V provides 256-bit security.

P2QRH addresses don't reveal their public key until they're spent. P2QR addresses have their public key encoded in the output, which goes on-chain. More security is needed when the public key is visible on-chain, and so NIST V should be used for P2QR addresses. It is assumed P2QRH addresses won't need this level of security, provided wallets implement anti-address reuse mechanisms.


== Specification ==

TBD

=== Public Key Generation ===

TBD

=== Public Key Conversion ===

TBD

=== Default Signing ===

TBD

=== Alternative Signing ===

TBD

=== Verification ===

TBD

=== Batch Verification ===

TBD

=== Usage Considerations ===

TBD

== Test Vectors and Reference Code ==

TBD


== Changelog ==

To help implementors understand updates to this BIP, we keep a list of substantial changes.

* 2024-06: High level rough draft


== Footnotes ==

<references />


== Acknowledgements ==

Much gratitude to my co-founder, Kyle Crews for proofreading and editing, and to David C. who suggested the name "QuBit." Thank you as well to those who took the time to review and contribute, including AB (and hopefully many more).
