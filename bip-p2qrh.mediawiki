<pre>
  BIP: TBD
  Title: QuBit - P2QRH spending rules
  Author: Hunter Beast <hunter@surmount.systems>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD
  Status: Draft
  Type: Standards Track
  License: BSD-3-Clause
  Created: 2024-06-08
</pre>

== Introduction ==

=== Abstract ===

This document proposes a new SegWit output type, with spending rules based on SQIsign signatures. A constraint is that no hard fork or modifications leading to an increase in block size are required to maintain no more than a significant decrease in block transaction density. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR address format using Schnorr signatures.

=== Copyright ===

This document is licensed under the 3-clause BSD license.

=== Motivation ===

This proposal aims to improve the quantum resistance of Bitcoin's signature security should the Discrete Logarithm Problem which secures Elliptic Curve Cryptography (EC DLP) no longer prove to be computationally hard, likely through quantum advantage. [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster, which here will be referred to as quantum key decryption. This means that doubling the key length, such as using a hypothetical secp512k1 curve, would only make finding the key twice as hard. Shor's algorithm in particular will likely require only 2^21 steps to recover the private key. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime].

The vulnerability of existing bitcoin addresses is investigated in [https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.

The following table is non-exhaustive, but meant to be informative to the average Bitcoin user.

{|
|+ Vulnerable address types matrix
|-
! Address type !! Vulnerable !! Prefix !! Example
|-
| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee
|-
| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
|-
| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku
|-
| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u
|}

It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key. It's possible Taproot keys are harder for a Shor's implementation to decrypt.

As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered "Satoshi's Shield." Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined. 

== Description ==

We first build up a definition of the signature scheme by going through the design choices. Afterwards, we specify the exact encodings and operations.

=== Design ===

This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B represents its connection to Bitcoin. The name QuBit also rhymes to some extent with SegWit.

It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are \[r\]esistant addresses, similar to how bc1q corresponds to Se\[q\]Wit and bc1p corresponds to Ta\[p\]root. This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].

The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).

The name P2QRH means Pay to Quantum Resistant Hash. This is similar to how P2PKH, as defined in [BIP-16](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification).

For descriptors, `qrh()` should be used.

> Further specific details to be defined after step 1 in the process outlined BIP-2


=== Specification ===

TBD

==== Public Key Generation ====

TBD

==== Public Key Conversion ====

TBD

==== Default Signing ====

TBD

==== Alternative Signing ====

TBD

==== Verification ====

TBD

==== Batch Verification ====

TBD

=== Usage Considerations ===

==== Messages of Arbitrary Size ====

TBD

==== Domain Separation ====

TBD

== Security ==

Quaternion isogeny signature algorithms represent the state of the art in post-quantum cryptography, beyond lattice cryptography, especially when key and signature length are major constraints.

Quantum resistant signature algorithms ordered by signature size:

* [https://sphincs.org SPHINCS+] - 17KB
* [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] - 702 bytes
* [https://falcon-sign.info FALCON] - 666 bytes
* [https://sqisign.org SQIsign] - 177 bytes
* [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] - 148 bytes
* [https://link.springer.com/chapter/10.1007/978-3-031-58716-0_1 FastSQIsignHD] - 107 bytes

In comparison:

* ECDSA - 70-72 bytes
* Schnorr - 64 bytes

Ideally FastSQIsignHD proves to be flexible enough to support [https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] and the key tweaking necessary to support TapScript.

== Test Vectors and Reference Code ==

TBD

== Changelog ==

To help implementors understand updates to this BIP, we keep a list of substantial changes.

* 2024-06: High level rough draft

== Footnotes ==

<references />

== Acknowledgements ==

TBD
